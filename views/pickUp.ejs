<!DOCTYPE html>
<html lang="en">

<head>
    <%- include("./partials/head"); %>
        <style>
            .alert {
                display: flex;
                justify-content: space-between;
            }

            .close {
                cursor: pointer;
            }

            form {
                display: flex;
                gap: 1em;
                margin: 1em 0;
            }

            form input {
                border-radius: 1em;
                padding: 1em .5em;
                border: 1px solid grey;
                width: 100%;
            }

            .alert {
                margin-top: 1em;
                padding: .5em 1em;
                color: #ff4858;
                background-color: #ffe0e3;
                width: fit-content;
                border-radius: 1em;
                display: flex;
                align-items: center;
            }

            .alert span {
                margin-left: .2em;
            }

            .card {
                width: 80%;
                border: 1px solid grey;
                border-radius: 1em;
                padding: 1em;
                display: flex;
                justify-content: space-between;
                gap: 1em;
            }

            .information {
                margin-right: 1em;
                display: flex;
                align-items: center;
            }

            .action {
                display: flex;
                gap: .5em;
            }

            select {
                border: 1px solid grey;
                padding: .5em 1em;
                border-radius: 1em;
            }

            .reserve {
                flex-direction: column;
                gap: 1em;
            }

            .reserve button.btn {
                width: fit-content;
                border: 1px solid green;
                background-color: white;
                color: green;
            }


            @media only screen and (max-width: 600px) {
                .card {
                    width: 100%;
                    flex-direction: column;
                }
            }
        </style>
</head>

<body>
    <div id="app">
        <div class="container">
            <h1>PICKUP</h1>
            <form @submit.prevent="search(stdID)">
                <input v-model="stdID" type="text" class="form-control" placeholder="Enter Student ID">
                <button type="submit" class="btn">Search</button>
            </form>

            <div v-if="errMsg" class="alert">
                <i class="fa-solid fa-circle-exclamation"></i>
                <span>{{errMsg}}</span>
            </div>

            <div v-if="queue" class="card reserve">
                <p>Reservation for {{searchStudent.id}} {{searchStudent.name}} {{searchStudent.class}}</p>
                <button @click="deleteQueue(searchStudent.id)" class="btn">Finish</button>
                <hr>
                <div class="card-footer text-muted">
                    Reserved: {{timeFromNow}}
                </div>
            </div>

            <div v-else>
                <div v-if="searchStudent.id" class="card">
                    <div class="information">
                        <p>{{searchStudent.id}} | <strong>{{searchStudent.name}}</strong> | {{searchStudent.class}}</p>
                    </div>

                    <div class="action">
                        <button @click="addQueue(searchStudent)" href="#" class="btn btn-primary">Reserve</button>
                        <select v-model="pickupType" class="form-select ms-2 w-25">
                            <option selected value="walk">Walk</option>
                            <option value="car">Car</option>
                        </select>
                    </div>
                </div>

            </div>


            <div v-if="showModal" class="alert alert-success" role="alert">
                <span>
                    <strong>Well done!</strong> Add Queue Successfully
                </span>
                <div class="close" @click="reset()">
                    <i class="fa-solid fa-xmark"></i>
                </div>
            </div>
        </div>
    </div>

    <%- include("./partials/footer"); %>

        <%- include("./partials/scripts"); %>

            <script>
                dayjs.extend(dayjs_plugin_relativeTime)
                const { createApp, ref, computed } = Vue

                createApp({
                    setup() {
                        const searchStudent = ref({})
                        const stdID = ref("")
                        const alertText = ""
                        const showModal = ref(false)
                        const queue = ref("")
                        const timeFromNow = ref("")
                        const errMsg = ref("")
                        const pickupType = ref('walk')

                        const search = async (id) => {
                            reset()

                            if (id) {


                                try {
                                    const res = await axios.get(`${baseURL}/db/Students/${id}`)
                                    searchStudent.value = res.data
                                } catch (err) {
                                    errMsg.value = err.message
                                    console.log(err)
                                }

                                getQueue(id)
                            } else {
                                errMsg.value = 'Please enter student ID'
                            }

                        }

                        const getQueue = async (id) => {
                            const res = await axios.get(`${baseURL}/api/${id}`)
                            queue.value = res.data
                            timeFormat()
                        }

                        const addQueue = (std) => {
                            std.pickupType = pickupType.value
                            console.log(std)
                            axios.post(`${baseURL}/api/add/queue`, std)
                            getQueue(std.id)
                        }

                        const deleteQueue = (id) => {
                            axios.delete(`${baseURL}/api/delete/${id}`)
                            getQueue(id)
                        }

                        const reset = () => {
                            showModal.value = false
                            stdID.value = ""
                            errMsg.value = ""
                            searchStudent.value = {}
                        }

                        const timeFormat = () => {
                            if (queue.value.datetime) {
                                timeFromNow.value = dayjs(queue.value.datetime).fromNow();

                                setInterval(() => {
                                    timeFormat()
                                }, 1000);
                            }
                        }

                        return {
                            stdID,
                            showModal,
                            searchStudent,
                            queue,
                            timeFromNow,
                            pickupType,
                            errMsg,
                            search,
                            reset,
                            addQueue,
                            deleteQueue
                        }
                    }
                }).mount('#app')
            </script>
</body>

</html>